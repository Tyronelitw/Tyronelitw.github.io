{"meta":{"title":"Tyronelitw的博客","subtitle":null,"description":"This is Tangwei Li blog , Welcome for you","author":"Tangwei Li","url":"https://Tyronelitw.github.io"},"pages":[{"title":"文章分类","date":"2018-04-02T06:51:08.000Z","updated":"2018-11-16T13:03:39.581Z","comments":true,"path":"categories/index.html","permalink":"https://Tyronelitw.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-04-02T06:58:08.000Z","updated":"2018-11-16T13:03:39.585Z","comments":true,"path":"tags/index.html","permalink":"https://Tyronelitw.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Test123","slug":"Test123","date":"2018-11-16T15:06:18.000Z","updated":"2018-11-16T15:06:50.183Z","comments":true,"path":"2018/11/16/Test123/","link":"","permalink":"https://Tyronelitw.github.io/2018/11/16/Test123/","excerpt":"","text":"test","categories":[],"tags":[]},{"title":"Test","slug":"Test-0","date":"2018-11-16T15:05:34.000Z","updated":"2018-11-16T15:05:34.171Z","comments":true,"path":"2018/11/16/Test-0/","link":"","permalink":"https://Tyronelitw.github.io/2018/11/16/Test-0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"test","slug":"test-1","date":"2018-11-16T13:10:11.000Z","updated":"2018-11-16T13:10:31.266Z","comments":true,"path":"2018/11/16/test-1/","link":"","permalink":"https://Tyronelitw.github.io/2018/11/16/test-1/","excerpt":"","text":"testqaq","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-16T12:52:47.035Z","updated":"2018-11-16T13:03:39.567Z","comments":true,"path":"2018/11/16/hello-world/","link":"","permalink":"https://Tyronelitw.github.io/2018/11/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"https://Tyronelitw.github.io/categories/test/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://Tyronelitw.github.io/tags/测试/"}]},{"title":"test","slug":"test","date":"2018-11-16T08:31:29.000Z","updated":"2018-11-16T13:30:28.977Z","comments":true,"path":"2018/11/16/test/","link":"","permalink":"https://Tyronelitw.github.io/2018/11/16/test/","excerpt":"","text":"testqaq阿西吧","categories":[{"name":"test","slug":"test","permalink":"https://Tyronelitw.github.io/categories/test/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://Tyronelitw.github.io/tags/测试/"},{"name":"文档","slug":"文档","permalink":"https://Tyronelitw.github.io/tags/文档/"}]},{"title":"ansible安装和基本使用","slug":"ansible安装和基本使用","date":"2018-04-08T09:31:37.000Z","updated":"2018-11-16T13:03:39.574Z","comments":true,"path":"2018/04/08/ansible安装和基本使用/","link":"","permalink":"https://Tyronelitw.github.io/2018/04/08/ansible安装和基本使用/","excerpt":"","text":"安装配置1、安装1[root@litw-docker ~]# yum install ansible -y 2、配置秘钥免密认证1234567891011121314151617181920212223242526272829303132333435363738394041424344[root@litw-docker ~]# ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:63:0f:67:df:2e:9d:3c:9b:41:b5:f4:85:03:ad:db:78 root@litw-docker.novalocalThe key's randomart image is:+--[ RSA 2048]----+| .. || ... || .o.o|| . .o+|| S o +...|| . * .ooE || . .+o. || ..=o || .+o |+-----------------+[root@litw-docker ~]# ssh-copy-id root@192.168.101.6/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@192.168.101.6's password: Number of key(s) added: 1Now try logging into the machine, with: \"ssh 'root@192.168.101.6'\"and check to make sure that only the key(s) you wanted were added.[root@litw-docker ~]# ssh-copy-id root@192.168.101.11The authenticity of host '192.168.101.11 (192.168.101.11)' can't be established.ECDSA key fingerprint is dd:a8:4a:aa:a3:09:92:50:50:53:e8:de:76:83:0c:05.Are you sure you want to continue connecting (yes/no)? yes/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysroot@192.168.101.11's password: Number of key(s) added: 1Now try logging into the machine, with: \"ssh 'root@192.168.101.11'\"and check to make sure that only the key(s) you wanted were added. 3、修改ansible配置hosts文件1234vim /etc/ansible/hosts[test]192.168.101.6192.168.101.11 ansible基本使用（模块）1、ping123456789[root@litw-docker ~]# ansible test -m ping192.168.101.6 | SUCCESS =&gt; &#123; \"changed\": false, \"ping\": \"pong\"&#125;192.168.101.11 | SUCCESS =&gt; &#123; \"changed\": false, \"ping\": \"pong\"&#125; 2、shell/command1234567891011121314151617181920212223242526272829303132333435363738[root@litw-docker ~]# ansible test -m shell -a \"ps aux | grep -c sshd\"192.168.101.6 | SUCCESS | rc=0 &gt;&gt;5192.168.101.11 | SUCCESS | rc=0 &gt;&gt;5[root@litw-docker ~]# ansible test -m command -a \"ps aux | grep -c sshd\"192.168.101.6 | FAILED | rc=1 &gt;&gt;error: garbage optionUsage: ps [options] Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;' or 'ps --help &lt;s|l|o|t|m|a&gt;' for additional help text.For more details see ps(1).non-zero return code192.168.101.11 | FAILED | rc=1 &gt;&gt;error: garbage optionUsage: ps [options] Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;' or 'ps --help &lt;s|l|o|t|m|a&gt;' for additional help text.For more details see ps(1).non-zero return code[root@litw-docker ~]# ansible test -m command -a \"uptime\"192.168.101.6 | SUCCESS | rc=0 &gt;&gt; 17:48:14 up 11 days, 54 min, 2 users, load average: 0.07, 0.04, 0.05192.168.101.11 | SUCCESS | rc=0 &gt;&gt; 17:48:14 up 11 days, 54 min, 2 users, load average: 0.00, 0.01, 0.05 可以看到command和shell模块最明显的区别是shell执行命令可以使用管道，command不可以。 3、copy1234567891011121314151617181920212223242526272829[root@litw-docker ~]# ansible test -m copy -a \"src=/root/ip.txt dest=/tmp/test owner=root group=root mode=600\"192.168.101.11 | SUCCESS =&gt; &#123; \"changed\": true, \"checksum\": \"1ec0d33dd7cfee811a9d0fc833d8d0b861084c95\", \"dest\": \"/tmp/test\", \"gid\": 0, \"group\": \"root\", \"md5sum\": \"885a3db6120c0857ecd8a5e71a3c8400\", \"mode\": \"0600\", \"owner\": \"root\", \"size\": 57, \"src\": \"/root/.ansible/tmp/ansible-tmp-1523181044.35-147146951272504/source\", \"state\": \"file\", \"uid\": 0&#125;192.168.101.6 | SUCCESS =&gt; &#123; \"changed\": true, \"checksum\": \"1ec0d33dd7cfee811a9d0fc833d8d0b861084c95\", \"dest\": \"/tmp/test\", \"gid\": 0, \"group\": \"root\", \"md5sum\": \"885a3db6120c0857ecd8a5e71a3c8400\", \"mode\": \"0600\", \"owner\": \"root\", \"size\": 57, \"src\": \"/root/.ansible/tmp/ansible-tmp-1523181044.34-260315740643744/source\", \"state\": \"file\", \"uid\": 0&#125; 4、service123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305[root@litw-docker ~]# ansible test -m service -a \"name=sshd state=started\"192.168.101.11 | SUCCESS =&gt; &#123; \"changed\": false, \"name\": \"sshd\", \"state\": \"started\", \"status\": &#123; \"ActiveEnterTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"ActiveEnterTimestampMonotonic\": \"39061736\", \"ActiveExitTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"ActiveExitTimestampMonotonic\": \"39051401\", \"ActiveState\": \"active\", \"After\": \"network.target system.slice systemd-journald.socket syslog.target auditd.service basic.target cloud-init.service\", \"AllowIsolate\": \"no\", \"AmbientCapabilities\": \"0\", \"AssertResult\": \"yes\", \"AssertTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"AssertTimestampMonotonic\": \"39053249\", \"Before\": \"multi-user.target shutdown.target\", \"BlockIOAccounting\": \"no\", \"BlockIOWeight\": \"18446744073709551615\", \"CPUAccounting\": \"no\", \"CPUQuotaPerSecUSec\": \"infinity\", \"CPUSchedulingPolicy\": \"0\", \"CPUSchedulingPriority\": \"0\", \"CPUSchedulingResetOnFork\": \"no\", \"CPUShares\": \"18446744073709551615\", \"CanIsolate\": \"no\", \"CanReload\": \"yes\", \"CanStart\": \"yes\", \"CanStop\": \"yes\", \"CapabilityBoundingSet\": \"18446744073709551615\", \"ConditionResult\": \"yes\", \"ConditionTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"ConditionTimestampMonotonic\": \"39053249\", \"Conflicts\": \"shutdown.target\", \"ControlGroup\": \"/system.slice/sshd.service\", \"ControlPID\": \"0\", \"DefaultDependencies\": \"yes\", \"Delegate\": \"no\", \"Description\": \"OpenSSH server daemon\", \"DevicePolicy\": \"auto\", \"EnvironmentFile\": \"/etc/sysconfig/sshd (ignore_errors=no)\", \"ExecMainCode\": \"0\", \"ExecMainExitTimestampMonotonic\": \"0\", \"ExecMainPID\": \"946\", \"ExecMainStartTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"ExecMainStartTimestampMonotonic\": \"39061689\", \"ExecMainStatus\": \"0\", \"ExecReload\": \"&#123; path=/bin/kill ; argv[]=/bin/kill -HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 &#125;\", \"ExecStart\": \"&#123; path=/usr/sbin/sshd ; argv[]=/usr/sbin/sshd -D $OPTIONS ; ignore_errors=no ; start_time=[Wed 2018-03-28 16:54:21 CST] ; stop_time=[n/a] ; pid=946 ; code=(null) ; status=0/0 &#125;\", \"ExecStartPre\": \"&#123; path=/usr/sbin/sshd-keygen ; argv[]=/usr/sbin/sshd-keygen ; ignore_errors=no ; start_time=[Wed 2018-03-28 16:54:21 CST] ; stop_time=[Wed 2018-03-28 16:54:21 CST] ; pid=943 ; code=exited ; status=0 &#125;\", \"FailureAction\": \"none\", \"FileDescriptorStoreMax\": \"0\", \"FragmentPath\": \"/usr/lib/systemd/system/sshd.service\", \"GuessMainPID\": \"yes\", \"IOScheduling\": \"0\", \"Id\": \"sshd.service\", \"IgnoreOnIsolate\": \"no\", \"IgnoreOnSnapshot\": \"no\", \"IgnoreSIGPIPE\": \"yes\", \"InactiveEnterTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"InactiveEnterTimestampMonotonic\": \"39052998\", \"InactiveExitTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"InactiveExitTimestampMonotonic\": \"39053607\", \"JobTimeoutAction\": \"none\", \"JobTimeoutUSec\": \"0\", \"KillMode\": \"process\", \"KillSignal\": \"15\", \"LimitAS\": \"18446744073709551615\", \"LimitCORE\": \"18446744073709551615\", \"LimitCPU\": \"18446744073709551615\", \"LimitDATA\": \"18446744073709551615\", \"LimitFSIZE\": \"18446744073709551615\", \"LimitLOCKS\": \"18446744073709551615\", \"LimitMEMLOCK\": \"65536\", \"LimitMSGQUEUE\": \"819200\", \"LimitNICE\": \"0\", \"LimitNOFILE\": \"4096\", \"LimitNPROC\": \"14644\", \"LimitRSS\": \"18446744073709551615\", \"LimitRTPRIO\": \"0\", \"LimitRTTIME\": \"18446744073709551615\", \"LimitSIGPENDING\": \"14644\", \"LimitSTACK\": \"18446744073709551615\", \"LoadState\": \"loaded\", \"MainPID\": \"946\", \"MemoryAccounting\": \"no\", \"MemoryCurrent\": \"18446744073709551615\", \"MemoryLimit\": \"18446744073709551615\", \"MountFlags\": \"0\", \"Names\": \"sshd.service\", \"NeedDaemonReload\": \"no\", \"Nice\": \"0\", \"NoNewPrivileges\": \"no\", \"NonBlocking\": \"no\", \"NotifyAccess\": \"none\", \"OOMScoreAdjust\": \"0\", \"OnFailureJobMode\": \"replace\", \"PermissionsStartOnly\": \"no\", \"PrivateDevices\": \"no\", \"PrivateNetwork\": \"no\", \"PrivateTmp\": \"no\", \"ProtectHome\": \"no\", \"ProtectSystem\": \"no\", \"RefuseManualStart\": \"no\", \"RefuseManualStop\": \"no\", \"RemainAfterExit\": \"no\", \"Requires\": \"basic.target\", \"Restart\": \"on-failure\", \"RestartUSec\": \"42s\", \"Result\": \"success\", \"RootDirectoryStartOnly\": \"no\", \"RuntimeDirectoryMode\": \"0755\", \"SameProcessGroup\": \"no\", \"SecureBits\": \"0\", \"SendSIGHUP\": \"no\", \"SendSIGKILL\": \"yes\", \"Slice\": \"system.slice\", \"StandardError\": \"inherit\", \"StandardInput\": \"null\", \"StandardOutput\": \"journal\", \"StartLimitAction\": \"none\", \"StartLimitBurst\": \"5\", \"StartLimitInterval\": \"10000000\", \"StartupBlockIOWeight\": \"18446744073709551615\", \"StartupCPUShares\": \"18446744073709551615\", \"StatusErrno\": \"0\", \"StopWhenUnneeded\": \"no\", \"SubState\": \"running\", \"SyslogLevelPrefix\": \"yes\", \"SyslogPriority\": \"30\", \"SystemCallErrorNumber\": \"0\", \"TTYReset\": \"no\", \"TTYVHangup\": \"no\", \"TTYVTDisallocate\": \"no\", \"TasksAccounting\": \"no\", \"TasksCurrent\": \"18446744073709551615\", \"TasksMax\": \"18446744073709551615\", \"TimeoutStartUSec\": \"1min 30s\", \"TimeoutStopUSec\": \"1min 30s\", \"TimerSlackNSec\": \"50000\", \"Transient\": \"no\", \"Type\": \"simple\", \"UMask\": \"0022\", \"UnitFilePreset\": \"enabled\", \"UnitFileState\": \"enabled\", \"WantedBy\": \"cloud-init.service multi-user.target\", \"Wants\": \"system.slice\", \"WatchdogTimestamp\": \"Wed 2018-03-28 16:54:21 CST\", \"WatchdogTimestampMonotonic\": \"39061722\", \"WatchdogUSec\": \"0\" &#125;&#125;192.168.101.6 | SUCCESS =&gt; &#123; \"changed\": false, \"name\": \"sshd\", \"state\": \"started\", \"status\": &#123; \"ActiveEnterTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"ActiveEnterTimestampMonotonic\": \"30808691\", \"ActiveExitTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"ActiveExitTimestampMonotonic\": \"30789169\", \"ActiveState\": \"active\", \"After\": \"cloud-init.service basic.target network.target syslog.target systemd-journald.socket auditd.service system.slice\", \"AllowIsolate\": \"no\", \"AmbientCapabilities\": \"0\", \"AssertResult\": \"yes\", \"AssertTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"AssertTimestampMonotonic\": \"30792622\", \"Before\": \"shutdown.target multi-user.target\", \"BlockIOAccounting\": \"no\", \"BlockIOWeight\": \"18446744073709551615\", \"CPUAccounting\": \"no\", \"CPUQuotaPerSecUSec\": \"infinity\", \"CPUSchedulingPolicy\": \"0\", \"CPUSchedulingPriority\": \"0\", \"CPUSchedulingResetOnFork\": \"no\", \"CPUShares\": \"18446744073709551615\", \"CanIsolate\": \"no\", \"CanReload\": \"yes\", \"CanStart\": \"yes\", \"CanStop\": \"yes\", \"CapabilityBoundingSet\": \"18446744073709551615\", \"ConditionResult\": \"yes\", \"ConditionTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"ConditionTimestampMonotonic\": \"30792621\", \"Conflicts\": \"shutdown.target\", \"ControlGroup\": \"/system.slice/sshd.service\", \"ControlPID\": \"0\", \"DefaultDependencies\": \"yes\", \"Delegate\": \"no\", \"Description\": \"OpenSSH server daemon\", \"DevicePolicy\": \"auto\", \"EnvironmentFile\": \"/etc/sysconfig/sshd (ignore_errors=no)\", \"ExecMainCode\": \"0\", \"ExecMainExitTimestampMonotonic\": \"0\", \"ExecMainPID\": \"944\", \"ExecMainStartTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"ExecMainStartTimestampMonotonic\": \"30808580\", \"ExecMainStatus\": \"0\", \"ExecReload\": \"&#123; path=/bin/kill ; argv[]=/bin/kill -HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 &#125;\", \"ExecStart\": \"&#123; path=/usr/sbin/sshd ; argv[]=/usr/sbin/sshd -D $OPTIONS ; ignore_errors=no ; start_time=[Wed 2018-03-28 16:54:25 CST] ; stop_time=[n/a] ; pid=944 ; code=(null) ; status=0/0 &#125;\", \"ExecStartPre\": \"&#123; path=/usr/sbin/sshd-keygen ; argv[]=/usr/sbin/sshd-keygen ; ignore_errors=no ; start_time=[Wed 2018-03-28 16:54:25 CST] ; stop_time=[Wed 2018-03-28 16:54:25 CST] ; pid=941 ; code=exited ; status=0 &#125;\", \"FailureAction\": \"none\", \"FileDescriptorStoreMax\": \"0\", \"FragmentPath\": \"/usr/lib/systemd/system/sshd.service\", \"GuessMainPID\": \"yes\", \"IOScheduling\": \"0\", \"Id\": \"sshd.service\", \"IgnoreOnIsolate\": \"no\", \"IgnoreOnSnapshot\": \"no\", \"IgnoreSIGPIPE\": \"yes\", \"InactiveEnterTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"InactiveEnterTimestampMonotonic\": \"30792148\", \"InactiveExitTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"InactiveExitTimestampMonotonic\": \"30793292\", \"JobTimeoutAction\": \"none\", \"JobTimeoutUSec\": \"0\", \"KillMode\": \"process\", \"KillSignal\": \"15\", \"LimitAS\": \"18446744073709551615\", \"LimitCORE\": \"18446744073709551615\", \"LimitCPU\": \"18446744073709551615\", \"LimitDATA\": \"18446744073709551615\", \"LimitFSIZE\": \"18446744073709551615\", \"LimitLOCKS\": \"18446744073709551615\", \"LimitMEMLOCK\": \"65536\", \"LimitMSGQUEUE\": \"819200\", \"LimitNICE\": \"0\", \"LimitNOFILE\": \"4096\", \"LimitNPROC\": \"14644\", \"LimitRSS\": \"18446744073709551615\", \"LimitRTPRIO\": \"0\", \"LimitRTTIME\": \"18446744073709551615\", \"LimitSIGPENDING\": \"14644\", \"LimitSTACK\": \"18446744073709551615\", \"LoadState\": \"loaded\", \"MainPID\": \"944\", \"MemoryAccounting\": \"no\", \"MemoryCurrent\": \"18446744073709551615\", \"MemoryLimit\": \"18446744073709551615\", \"MountFlags\": \"0\", \"Names\": \"sshd.service\", \"NeedDaemonReload\": \"no\", \"Nice\": \"0\", \"NoNewPrivileges\": \"no\", \"NonBlocking\": \"no\", \"NotifyAccess\": \"none\", \"OOMScoreAdjust\": \"0\", \"OnFailureJobMode\": \"replace\", \"PermissionsStartOnly\": \"no\", \"PrivateDevices\": \"no\", \"PrivateNetwork\": \"no\", \"PrivateTmp\": \"no\", \"ProtectHome\": \"no\", \"ProtectSystem\": \"no\", \"RefuseManualStart\": \"no\", \"RefuseManualStop\": \"no\", \"RemainAfterExit\": \"no\", \"Requires\": \"basic.target\", \"Restart\": \"on-failure\", \"RestartUSec\": \"42s\", \"Result\": \"success\", \"RootDirectoryStartOnly\": \"no\", \"RuntimeDirectoryMode\": \"0755\", \"SameProcessGroup\": \"no\", \"SecureBits\": \"0\", \"SendSIGHUP\": \"no\", \"SendSIGKILL\": \"yes\", \"Slice\": \"system.slice\", \"StandardError\": \"inherit\", \"StandardInput\": \"null\", \"StandardOutput\": \"journal\", \"StartLimitAction\": \"none\", \"StartLimitBurst\": \"5\", \"StartLimitInterval\": \"10000000\", \"StartupBlockIOWeight\": \"18446744073709551615\", \"StartupCPUShares\": \"18446744073709551615\", \"StatusErrno\": \"0\", \"StopWhenUnneeded\": \"no\", \"SubState\": \"running\", \"SyslogLevelPrefix\": \"yes\", \"SyslogPriority\": \"30\", \"SystemCallErrorNumber\": \"0\", \"TTYReset\": \"no\", \"TTYVHangup\": \"no\", \"TTYVTDisallocate\": \"no\", \"TasksAccounting\": \"no\", \"TasksCurrent\": \"18446744073709551615\", \"TasksMax\": \"18446744073709551615\", \"TimeoutStartUSec\": \"1min 30s\", \"TimeoutStopUSec\": \"1min 30s\", \"TimerSlackNSec\": \"50000\", \"Transient\": \"no\", \"Type\": \"simple\", \"UMask\": \"0022\", \"UnitFilePreset\": \"enabled\", \"UnitFileState\": \"enabled\", \"WantedBy\": \"multi-user.target cloud-init.service\", \"Wants\": \"system.slice\", \"WatchdogTimestamp\": \"Wed 2018-03-28 16:54:25 CST\", \"WatchdogTimestampMonotonic\": \"30808640\", \"WatchdogUSec\": \"0\" &#125;&#125; 5、yum123456789[root@litw-docker ~]# ansible test -m yum -a \"name=vim state=present\"192.168.101.6 | SUCCESS =&gt; &#123; \"changed\": true, \"msg\": \"\", \"rc\": 0, \"results\": [ \"Loaded plugins: fastestmirror\\nLoading mirror speeds from cached hostfile\\n * base: mirrors.aliyun.com\\n * extras: mirrors.aliyun.com\\n * updates: mirrors.cn99.com\\nResolving Dependencies\\n--&gt; Running transaction check\\n---&gt; Package vim-enhanced.x86_64 2:7.4.160-2.el7 will be installed\\n--&gt;内容太多，只摘取部分。 6、script12345678910111213141516171819202122232425262728293031323334353637[root@litw-docker ~]# ansible test -m script -a \"/root/ping.sh\"192.168.101.6 | SUCCESS =&gt; &#123; \"changed\": true, \"rc\": 0, \"stderr\": \"Shared connection to 192.168.101.6 closed.\\r\\n\", \"stdout\": \"PING 192.168.101.1 (192.168.101.1) 56(84) bytes of data.\\r\\n64 bytes from 192.168.101.1: icmp_seq=1 ttl=64 time=1.20 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=2 ttl=64 time=0.383 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=3 ttl=64 time=0.359 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=4 ttl=64 time=0.388 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=5 ttl=64 time=1.48 ms\\r\\n\\r\\n--- 192.168.101.1 ping statistics ---\\r\\n5 packets transmitted, 5 received, 0% packet loss, time 4001ms\\r\\nrtt min/avg/max/mdev = 0.359/0.764/1.488/0.485 ms\\r\\n\", \"stdout_lines\": [ \"PING 192.168.101.1 (192.168.101.1) 56(84) bytes of data.\", \"64 bytes from 192.168.101.1: icmp_seq=1 ttl=64 time=1.20 ms\", \"64 bytes from 192.168.101.1: icmp_seq=2 ttl=64 time=0.383 ms\", \"64 bytes from 192.168.101.1: icmp_seq=3 ttl=64 time=0.359 ms\", \"64 bytes from 192.168.101.1: icmp_seq=4 ttl=64 time=0.388 ms\", \"64 bytes from 192.168.101.1: icmp_seq=5 ttl=64 time=1.48 ms\", \"\", \"--- 192.168.101.1 ping statistics ---\", \"5 packets transmitted, 5 received, 0% packet loss, time 4001ms\", \"rtt min/avg/max/mdev = 0.359/0.764/1.488/0.485 ms\" ]&#125;192.168.101.11 | SUCCESS =&gt; &#123; \"changed\": true, \"rc\": 0, \"stderr\": \"Shared connection to 192.168.101.11 closed.\\r\\n\", \"stdout\": \"PING 192.168.101.1 (192.168.101.1) 56(84) bytes of data.\\r\\n64 bytes from 192.168.101.1: icmp_seq=1 ttl=64 time=0.810 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=2 ttl=64 time=0.517 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=3 ttl=64 time=0.544 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=4 ttl=64 time=0.563 ms\\r\\n64 bytes from 192.168.101.1: icmp_seq=5 ttl=64 time=1.59 ms\\r\\n\\r\\n--- 192.168.101.1 ping statistics ---\\r\\n5 packets transmitted, 5 received, 0% packet loss, time 4000ms\\r\\nrtt min/avg/max/mdev = 0.517/0.806/1.599/0.411 ms\\r\\n\", \"stdout_lines\": [ \"PING 192.168.101.1 (192.168.101.1) 56(84) bytes of data.\", \"64 bytes from 192.168.101.1: icmp_seq=1 ttl=64 time=0.810 ms\", \"64 bytes from 192.168.101.1: icmp_seq=2 ttl=64 time=0.517 ms\", \"64 bytes from 192.168.101.1: icmp_seq=3 ttl=64 time=0.544 ms\", \"64 bytes from 192.168.101.1: icmp_seq=4 ttl=64 time=0.563 ms\", \"64 bytes from 192.168.101.1: icmp_seq=5 ttl=64 time=1.59 ms\", \"\", \"--- 192.168.101.1 ping statistics ---\", \"5 packets transmitted, 5 received, 0% packet loss, time 4000ms\", \"rtt min/avg/max/mdev = 0.517/0.806/1.599/0.411 ms\" ]&#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://Tyronelitw.github.io/categories/技术/"}],"tags":[{"name":"文档","slug":"文档","permalink":"https://Tyronelitw.github.io/tags/文档/"},{"name":"技术","slug":"技术","permalink":"https://Tyronelitw.github.io/tags/技术/"},{"name":"ansible","slug":"ansible","permalink":"https://Tyronelitw.github.io/tags/ansible/"},{"name":"自动化","slug":"自动化","permalink":"https://Tyronelitw.github.io/tags/自动化/"}]},{"title":"hexo给文章添加分类和标签","slug":"hexo给文章添加分类和标签","date":"2018-04-02T07:05:51.000Z","updated":"2018-11-16T13:03:39.571Z","comments":true,"path":"2018/04/02/hexo给文章添加分类和标签/","link":"","permalink":"https://Tyronelitw.github.io/2018/04/02/hexo给文章添加分类和标签/","excerpt":"","text":"本文为转转，原文链接 本教程针对的是Mac环境下，nexT主题的文章分类和标签设置，其他主题也应该是类似的。添加成功后会在侧边栏或导航栏生成“分类”和“标签”这两个选项，看下图： 文章分类、标签 点击“分类”后的页面： 文章分类页 点击“标签”后的页面： 标签 ok，大概效果就是这样的，下面进入教程 1、创建“分类”选项1.1 生成“分类”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 $ hexo new page categories成功后会提示： INFO Created: ~/Documents/blog/source/categories/index.md根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： title: 文章分类 date: 2017-05-27 13:47:40添加type: “categories”到内容中，添加后是这样的： title: 文章分类date: 2017-05-27 13:47:40 type: “categories”保存并关闭文件。 1.2 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: web前端 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 2、创建“标签”选项2.1 生成“标签”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 $ hexo new page tags成功后会提示： INFO Created: ~/Documents/blog/source/tags/index.md根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： title: 标签 date: 2017-05-27 14:22:08添加type: “tags”到内容中，添加后是这样的： title: 文章分类date: 2017-05-27 13:47:40 type: “tags”保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 表单验证就是这篇文章的标签了 title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: web前端tags: jQuery 表格 表单验证 至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。 教程结束，赶紧去设置吧！","categories":[{"name":"教程","slug":"教程","permalink":"https://Tyronelitw.github.io/categories/教程/"}],"tags":[{"name":"摘抄","slug":"摘抄","permalink":"https://Tyronelitw.github.io/tags/摘抄/"},{"name":"文档","slug":"文档","permalink":"https://Tyronelitw.github.io/tags/文档/"}]},{"title":"为人处世话方圆","slug":"处世话方圆","date":"2018-03-30T08:35:14.000Z","updated":"2018-11-16T13:03:39.578Z","comments":true,"path":"2018/03/30/处世话方圆/","link":"","permalink":"https://Tyronelitw.github.io/2018/03/30/处世话方圆/","excerpt":"","text":"本文为短美文章网摘抄,原文链接.为人处世话方圆 感悟精选（1）： 为人处世话方圆 怎样处世才是最好，是“方”还是“圆”？有的人说是“圆”——圆滑乖巧、八面玲珑，有的人说是“方”——方正不阿、坚持原则。其实，偏重“圆”和偏重“方”都是不恰当的，“方”和“圆”乃是人相交的不可或缺，不可偏废的两大策略。 先谈谈“圆”。原文链接 一个恰如好处“行圆”的人，也就是在重要时候讲究变通灵活的人，其人际交往的回旋余地就大，其各方面成功的可能性就大。火车上，一个小伙躺在座位上。有一位母亲牵着儿子上车了，儿子摇着小伙子说：“叔叔，我要坐！”小伙装睡不加理睬。母亲婉转地对儿子说：“别吵叔叔，叔叔累了，他躺一会儿，会让给你坐的。”小伙听罢，忙起身红着脸说：“你们坐吧！”看来，这位母亲十分懂得交际之道。在当时，如果这位母亲指责小伙子的不是，其行为虽无可非议，但却有可能造成两者间紧张关系，于事无补。“行圆”，有它则会一帆风顺，无它则是逆水行舟。 再说说“方”。 历史上，忠尽耿耿的屈原、刚直无私的包拯、清正廉洁的海瑞、浩然正气的文天祥以及隐居深山不食周粟的伯夷、叔齐等等，都不失为“行方”的典型，也就因此，而流芳百世。如果一个方正不阿、坚持原则恰到好处，就会受到人们的钦佩、信任，由此带来一些意想不到的好效果。有位护士刚从校园毕业，在一家医院学习，其间若能让院方满意，便可获得一份正式工作，否则就得离开。一天，有位因车祸而生命垂危的病人需要手术，这位实习护士被安排作处科手术专家、院长亨利教授的助手。当手术将完，患者伤口即将缝合时，这位护士突然严肃地对院长说：“亨利教授，我们用了12块纱布，但是您只取出了11块。”院长不屑一顾地回答说：“我已经全部取出了，不要多说，立即缝合。”“不”，这位护士高声抗议道，“我们确实用了12块纱布。”院长对此不加理睬，命令道：“听我的，准备缝合。”这位实习护士听到后，几乎大叫起来：“你是医生，你不能这样做！”直到这时，院长冷漠的脸上才浮出一丝微笑。他举起手心里握着的每12块纱布，高声宣布道：“她是我最合格的助手。”不用说，这位实习护士理所当然地获得了这份工作。如果在当时，这位实习护士不会怎样呢？毋庸置疑她将会失去这份正式工作。这个实例说明了“行方”的好 处。 感悟精选（2）： 处世之本话“方圆” “方”为做人之本。要求为人正直、诚实、谦逊、勤勉、质朴、守信、耐心、勇气、公正，对人要真诚、友善、宽容、乐于助人、善于分享。――真正卓越的人生，少不了正确的价值观，也就是品德。 在所有成功的要素中，品德是成功之本。所以，一个人想要成功，他品质是最为关键的，因为人的品质决定人生成败！为人要低调，低调做人，能够在你周围持续健康的空气，构成一个良好的人际生态环境。 “圆”为处世之道。要求做事讲究策略、方法、技巧和艺术性。要用心地与人进行良好的沟通，要善于与人相处与合作、要用心建立广泛的人脉、要求进行广泛的资源整合。 做事要高调，高调做事，能够赢得用心的支持和声誉。 在现实生活中我们常见一些八面玲珑，但心术不正的交际高手，由于缺少“方”之灵魂，他们最终将难以成功。但同时我们也经常看到不少做人十分本份，待人十分真诚的职场人士，由于缺少“圆”之艺术郁不得志，也很难获得成功。 内方外圆的为人处世之道是一个人获得成功的一个重要因素。 处世面子学：对待主子的亲人比亲人还亲。 面子是地位和身份的象征，有面子的撑面子，没有面子充面子；自己要面子，也要给人以面子；要赏脸、捧场；会借光遮羞。 处世隐忍学：做一个全职能的好部属。 小不忍而乱大谋。韩信能忍胯下之辱，勾践能赏夫差之便，委曲求全，寻机潜龙腾空。祸福相依，见好就收。水至清则无鱼，人至察则无徒；得理饶人，韬光养晦，隐忍处世。 处世识人学：识人、观人、御人求人，人尽其能 认人，观人有绝招，一招更比一招妙；认人、观人有决窍，要看衣食住行和爱好；言为心声，眼为心窗，都是真人不露相。 处世变通学：是奴才就要有奴才样，可主子离了我也玩不转。 穷则变，变则通，通则久。规矩是死的，人是活的，具体问题具体分析，因人、因时、因地而异，不让条款害死人，大活人不能让尿憋死，话糟理不糟，以变应变，不拘定法，见招拆招。 处世糊涂学：在同船共渡与党同伐异间寻求平衡。 不要聪明反被聪明误。机关算尽太聪明，反算了卿卿性命；费尽心机，聪明反被聪明误。聪明难，糊涂更难，装聋作哑，招痴卖傻，大智若愚，大愚有智，以小糊涂换得大好处。 处世中庸学：冷静周旋，把危机不见于无形之中。 “厚”能摆正自己的位置，“黑”能在纷争的现实社会中立足。报朴守拙不偏不依为中庸，不急功近利，但是犹不及；无欲速，一无见小利，欲速则不达；既不功高盖主，也不让人小瞧。 处世交际学：做一个一呼百应的人。 适应社会也不失自我。处世交际的高妙在于心眼是否灵活，手段是否高妙，找对庙门走对路，好风借力，借梯登天，勤学蜘蛛织网，不能平时不烧香，临时抱佛脚。 处世应酬学：收买人心方面，敢于不惜血本。 见到先生说书，见到屠夫说猪。平时多烧香，用时不慌张，烧香有烧香的地方，烧香也要烧香的规矩。 处世性别学：无善无不善，心理变化，皆循力学公例而行 手指月，人能循着手看去就能够望见天空上之月；人能循着性格研究去，就能够窥见人性之真相。 处世包装学：把自己装扮成可教之儒子。 善于包装是智慧。把自己当成联合国大使来包装自己。 感悟精选（3）： 为人处世话方圆 圆形象征着循环、永恒、完美、完整和力量；圆，代表着圆满、圆通与圆润。意味着自由和舒畅。如佛像头上或身上闪闪的光环，代表着佛的智慧与觉悟。又如佛教徒携带的圆润的念珠等，都是实践圆成佛道的资具，即法器。更如道教的太极图，圆内以S曲线分黑白环弧形，白中有一个小黑圆，黑中有一个小白圆。白为阳，黑为阴，象征阴阳互根。环弧形如两鱼交游状，以示阴阳变化循环不已。太极生两仪，两仪生四象，四象生八卦，八八六十四卦，乃至无穷。伏羲的先天八卦经周文王演《易》和孔子对《易经》的解读，以及后人不断地丰富与发展，构成了中华民族的文化。 中国人做事爱讲究圆――圆活、圆通、圆顺、圆浑等。圆，意味着好、美、圆满、成熟、快乐，不缺失、很完美、很周全，方方面面都能照顾到。佛教认为圆，不偏倚，圆则通。《楞严经》中说“慧觉圆通，得无疑惑。”做人要圆活，做事要通理、合法。佛教认为人通佛法，也就通晓了活法。儒家将圆（即“○”）视为大道之体，大道之体即是仁爱、友善、宽恕、平和。“○”就是“0”，是开始，是所有一切进程数字的起点，饱含着无限的企盼与希冀。“0”是无，呈现出一种空无、虚无状态，这是佛陀极力推崇的人生理念。在0和空无中，生命能够对存在无碍地接纳。最主要的是“0”的谐音是灵，除表示灵活灵动外，还指向心灵和灵魂。它将我们引入高尚的精神生活境界。 在当下社会，这个“0”被“8”极大地侵害和扭曲了（圆环可扭转成8）。因为8的谐音为发，贴合人们企盼发财的愿望。所以“8”字被许多人疯狂地追逐着，如出高价挑选内含88的电话号码和汽车牌号，出门远行要选内含8的日期或时间，结婚、签约、开业也选8号18号28号之类的吉日……。结果将“0”扭结成麻花状。如果人把自己扭结纠缠成麻花状，生命还能会舒展、畅快妈？ 圆，在人生各个年龄段里，孩子讲圆润、青年讲圆活、成年讲圆熟、老年讲圆通。但天有阴晴，月有圆缺，人有悲欢离合，谁也脱离不开自然的属性与规律。求圆只是一个完美的愿望。用我们儿时天真的眼光，来看今日难以忘怀的人和事，用青春不知圆为何物的心态，去体验被锐器刺痛内心的感受，慢慢就会觉悟到生命中有点遗憾，有点缺失，有点笨拙，有点疏忽，才会让自己比他人多一些选取，多一些自由，多一些强项。实际上，自然界那些有强大生命力的、鲜活跃动的、奇异蓬勃的、成功傲世的，往往不是圆的东西，而是尖锐的、粗狂的、忤逆的、乖张的……，无论是矿物、植物、动物、人物……。果实圆了也熟了，也该脱落了。我们总能在一个人身上，找到左伸右突的棱角，这些有尖角、有朝气、鬼点子多的人，往往比圆滑、老道、墨守成规的人更具有想象力，更惹人喜欢。这从这方面说是缺点，从那方面说恰恰是保鲜药、防腐剂和激活力，是优点。 所以，在讲圆的同时，不能不讲方。方圆之道，自古至今都被视为生命之大道，做人之大智，做事之大端。 方，如天安门广场托起圆球和圆柱的长方形花坛，像中山公园承载革命先驱孙中山脚步的方形花坛。方，是做人之本，是处事的原则与目标，是做人的正气与骨气，是人立身的脊梁和应有的品质。圆，是处世之道，是处事的手段与策略，是处世的成熟、老练与圆融。千百年来，“方圆有致”被公认为是最适合中国人做人、做事的成功心法，成大事者的奥秘正在于方与圆完美的结合，恰如古钱币，方外有圆，圆中有方，方圆相济，方圆合一；也即天地人三才合一。 方圆之道是中国哲学和文化中所特有的概念；方圆之道是中国经典中的经典，哲学中的哲学，智慧中的智慧。孟子说：“规矩，方圆之至也。”黄炎培说：“和若春风，萧若秋霜。取象于钱，外圆内方。”方圆的世界，方圆的人生，方圆揭示了为人处世的高超艺术，是为人处世永恒的智慧。为人没有方，会被视作软弱可欺；做事不懂圆，会处处树敌，事事碰壁。尚若太过方正或太过圆滑，也会步履艰难甚至寸步难行。所以，做人做事该方则方，该圆则圆，做到方圆有度，恰到好处，并使之提升为自身内在的品质，才能圆润通达。 人！只有运用好方圆之道，才能进退自若，所向披靡，无往而不胜。","categories":[{"name":"test","slug":"test","permalink":"https://Tyronelitw.github.io/categories/test/"}],"tags":[{"name":"摘抄","slug":"摘抄","permalink":"https://Tyronelitw.github.io/tags/摘抄/"},{"name":"心情","slug":"心情","permalink":"https://Tyronelitw.github.io/tags/心情/"},{"name":"美文","slug":"美文","permalink":"https://Tyronelitw.github.io/tags/美文/"}]},{"title":"My New Post","slug":"My-New-Post","date":"2018-03-30T07:03:27.000Z","updated":"2018-11-16T13:03:39.569Z","comments":true,"path":"2018/03/30/My-New-Post/","link":"","permalink":"https://Tyronelitw.github.io/2018/03/30/My-New-Post/","excerpt":"","text":"##Hello,everyone! My Name is Tyrone. This is My Blog. Welcome to here. ##你好啊！欢迎来到我的个人博客，在这里你就会浏览到很多IT技术相关的文章，当然了，平时也会记录一些日常，写写心情感悟，欢迎吐槽哦。 ###test-test-test。 ##No.1 Create a new post 1# hexo new \"test\"","categories":[{"name":"test","slug":"test","permalink":"https://Tyronelitw.github.io/categories/test/"}],"tags":[{"name":"测试","slug":"测试","permalink":"https://Tyronelitw.github.io/tags/测试/"}]}]}